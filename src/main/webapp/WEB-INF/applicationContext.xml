<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:ws="http://jax-ws.dev.java.net/spring/core"
    xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://jax-ws.dev.java.net/spring/core
    http://jax-ws.dev.java.net/spring/core.xsd
    http://jax-ws.dev.java.net/spring/servlet
    http://jax-ws.dev.java.net/spring/servlet.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
        <!--
                This will automatically locate any and all property files you have
                within your classpath, provided they fall under the META-INF
                directory. The located property files are parsed and their values can
                then be used within application context files in the form of
                ${propertyKey}.
        -->
        
        <!-- <context:property-placeholder location="classpath*:*.properties" />  -->
        
        
        <!-- Defines the base package for the Spring Annotater -->
        <context:component-scan base-package="com.syedatifakhtar" />
        
        <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:com/syedatifakhtar/mail.properties</value>
				</list>
			</property>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		</bean>
    
        <bean id="wicketApplication" class="com.syedatifakhtar.WicketApplication">
            <property name="messengerService" ref="messengerService"></property>
        </bean>
       
        <bean id="messengerService" class="com.syedatifakhtar.service.MessengerServiceImpl">
            <property name="message" value="Welcome Cheesr Admin!"></property>
        </bean>
        
        <!-- JDBC Data Source. It is assumed you have MySQL running on localhost port 3306 with
       username root and admin as password.-->
  	   <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	       <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	       <property name="url" value="jdbc:mysql://localhost:3306/atif"/>
	       <property name="username" value="root"/>
	       <property name="password" value="admin"/>
	       <property name="validationQuery" value="SELECT 1"/>
       </bean>
       
		  	    <!-- Hibernate Session Factory -->
		  <bean id="mySessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		    <property name="dataSource" ref="myDataSource"/>
		    <property name="packagesToScan">
		      <array>
		        <value>com.syedatifakhtar</value>
		      </array>
		    </property>
		    <property name="hibernateProperties">
		      <value>
		        hibernate.dialect=org.hibernate.dialect.MySQLDialect
		        hbm2ddl.auto=create
		      </value>
		    </property>
		  </bean>
		   
		  <!-- Hibernate Transaction Manager -->
		  <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		    <property name="sessionFactory" ref="mySessionFactory"/>
		  </bean>
		  
		  <bean id="cheeseDAO" class="com.syedatifakhtar.dao.CheeseDAOImpl">
		      <property name="mySessionFactory" ref="mySessionFactory"/>
		  </bean>
		  
		  		  
		  <bean id="orderDAO" class="com.syedatifakhtar.dao.OrderDAOImpl">
		      <property name="mySessionFactory" ref="mySessionFactory"/>
		  </bean>
		  
		 <bean id="cheeseService" class="com.syedatifakhtar.service.CheeseServiceImpl">
		      <property name="cheeseDAO" ref="cheeseDAO"/>
		  </bean>
		  
		   
		<bean id="cheeseOrderService" class="com.syedatifakhtar.service.CheeseOrderServiceImpl">
		      <property name="orderDAO" ref="orderDAO"/>
		      <property name="cheeseDAO" ref="cheeseDAO"/>
		  </bean>
		  
		<bean id="userDAO" class="com.syedatifakhtar.dao.UserDAOImpl">
		     	<property name="mySessionFactory" ref="mySessionFactory"/>
		 </bean>
		 
		<bean id="userService" class="com.syedatifakhtar.service.UserServiceImpl">
		    <property name="userDAO" ref="userDAO"/>
		</bean>
		
		  <!-- Activates annotation based transaction management -->
		  <tx:annotation-driven transaction-manager="transactionManager"/>
		  
	    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	        <property name="host" value="${mail.host}"/>
	        <property name="port" value="${mail.port}"/>
	        <property name="username" value="${mail.username}"/>
	        <property name="password" value="${mail.password}"/>
	        <property name="javaMailProperties">
	            <props>
	                <prop key="mail.transport.protocol">${mail.transport.protocol}</prop>
	                <prop key="mail.smtp.auth">${mail.smtp.aut}</prop>
	                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
	                <prop key="mail.debug">${mail.debug}</prop>
	            </props>
	        </property>
	    </bean>
			  
		  <bean id="cheeseOrderDebugger" class="com.syedatifakhtar.AOP.CheeseOrderDebugger"/>
		 <aop:config>
		     <aop:aspect ref="cheeseOrderDebugger">
		         <aop:pointcut id="saveOrder" 
		             expression="execution(* com.syedatifakhtar.service.CheeseOrderServiceImpl.saveOrder(..))" />
		         <aop:before
		             pointcut-ref="saveOrder"
		             method="printOrderInfo" />
    		     <aop:after
		             pointcut-ref="saveOrder"
		             method="printOrderCompleted" />
		     </aop:aspect>
		 </aop:config>
</beans>