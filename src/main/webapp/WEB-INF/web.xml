<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"
	version="2.5">

	<display-name>Wicket integration template</display-name>
	<context-param>
	    <param-name>configuration</param-name>
	    <param-value>development</param-value>
	</context-param>
	<!--
		There are three means to configure Wickets configuration mode and they 
		are tested in the order given.
		
		1) A system property: -Dwicket.configuration 
		2) servlet specific <init-param> 
		3) context specific <context-param>

		The value might be either "development" (reloading when templates change) or 
		"deployment". If no configuration is found, "development" is the default. -->

	<!-- 
		Define the filter which actually "filters" through all incoming URL requests to 
		the defined class,in our case the WicketFilter
		
		Since we are uing Spring,we need to instantiate the Spring based flavour of the filter
		and automatically injects the wicketApplication bean which contains our WicketApplication code
	 -->
	<filter>
		<filter-name>Cheesr</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
		    <init-param>
        	<param-name>applicationFactoryClassName</param-name>
        	<param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>
    	</init-param>
		<init-param>
        	<param-name>applicationFactoryBean</param-name>
        	<param-value>wicketApplication</param-value>
    	</init-param>
	</filter>

	<!-- Filter all incoming requests with the url /WicketBootstrap ie localhost:8080/Cheesr/ -->
	<filter-mapping>
		<filter-name>Cheesr</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<servlet>
    	        <servlet-name>jaxws-servlet</servlet-name>
    	       <servlet-class>
    		          com.sun.xml.ws.transport.http.servlet.WSSpringServlet
    	        </servlet-class>
  	</servlet>
 
	<servlet-mapping>
                <servlet-name>jaxws-servlet</servlet-name>
                <url-pattern>/hello</url-pattern>
         </servlet-mapping>
	
	<!-- 
	    <servlet>
        <description>Apache CXF Endpoint</description>
        <display-name>cxf</display-name>
        <servlet-name>cxf</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>cxf</servlet-name>
        <url-pattern>/services/*</url-pattern>
    </servlet-mapping>
	 -->
	<listener id="myLogger">
    	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	<!--IMPORTANT:Do not miss this out
		The ContextLoaderListener is the real deal,it creates and manages the applicationContext -->
	<listener>
	    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	


</web-app>

